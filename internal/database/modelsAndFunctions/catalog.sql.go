// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: catalog.sql

package modelsAndFunctions

import (
	"context"

	"github.com/google/uuid"
)

const addProduct = `-- name: AddProduct :one
INSERT INTO catalog (id, name, description, price)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, price
`

type AddProductParams struct {
	ID          uuid.UUID
	Name        string
	Description string
	Price       int32
}

func (q *Queries) AddProduct(ctx context.Context, arg AddProductParams) (Catalog, error) {
	row := q.db.QueryRowContext(ctx, addProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
	)
	var i Catalog
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :one
DELETE FROM catalog WHERE id=$1
RETURNING id, name, description, price
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) (Catalog, error) {
	row := q.db.QueryRowContext(ctx, deleteProduct, id)
	var i Catalog
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
	)
	return i, err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, description, price FROM catalog
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Catalog, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Catalog
	for rows.Next() {
		var i Catalog
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, description, price FROM catalog WHERE id=$1
`

func (q *Queries) GetProduct(ctx context.Context, id uuid.UUID) (Catalog, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Catalog
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
	)
	return i, err
}

const updateProductDescription = `-- name: UpdateProductDescription :exec
UPDATE catalog SET description=$2 WHERE id=$1
`

type UpdateProductDescriptionParams struct {
	ID          uuid.UUID
	Description string
}

func (q *Queries) UpdateProductDescription(ctx context.Context, arg UpdateProductDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateProductDescription, arg.ID, arg.Description)
	return err
}

const updateProductName = `-- name: UpdateProductName :exec
UPDATE catalog SET name=$2 WHERE id=$1
`

type UpdateProductNameParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpdateProductName(ctx context.Context, arg UpdateProductNameParams) error {
	_, err := q.db.ExecContext(ctx, updateProductName, arg.ID, arg.Name)
	return err
}

const updateProductPrice = `-- name: UpdateProductPrice :exec
UPDATE catalog SET price=$2 WHERE id=$1
`

type UpdateProductPriceParams struct {
	ID    uuid.UUID
	Price int32
}

func (q *Queries) UpdateProductPrice(ctx context.Context, arg UpdateProductPriceParams) error {
	_, err := q.db.ExecContext(ctx, updateProductPrice, arg.ID, arg.Price)
	return err
}
